broken_JenkinsLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-jenkins-controller
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t3a.medium
        IamInstanceProfile:
          Name: !Ref JenkinsControllerInstanceProfile
        SecurityGroupIds:
          - !Ref JenkinsControllerSecurityGroup
        KeyName: !Ref KeyName
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              DeleteOnTermination: true
        MetadataOptions:
          HttpTokens: required
          HttpEndpoint: enabled
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe

            # Update system and install dependencies
            yum update -y
            yum install -y jq wget curl

            # Install Java 17
            yum install -y java-17-amazon-corretto-headless amazon-efs-utils

            # Mount EFS with retries
            JENKINS_HOME="/var/lib/jenkins"
            mkdir -p $JENKINS_HOME
            
            for i in {1..3}; do
              if mount -t efs ${EFSFileSystem}:/ $JENKINS_HOME; then
                echo "EFS mounted successfully"
                break
              fi
              echo "Attempt $i to mount EFS failed, retrying in 10 seconds..."
              sleep 10
            done

            # Verify mount
            if ! mountpoint -q $JENKINS_HOME; then
              echo "Failed to mount EFS after 3 attempts"
              exit 1
            fi

            echo "${EFSFileSystem}:/ $JENKINS_HOME efs _netdev,tls,noatime 0 0" >> /etc/fstab

            # Create Jenkins user and group
            groupadd -r jenkins
            useradd -r -g jenkins -d $JENKINS_HOME -s /sbin/nologin jenkins

            # Install Jenkins
            wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
            rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

            # Install Jenkins with retries
            for i in {1..3}; do
              if yum install -y jenkins; then
                break
              fi
              echo "Attempt $i to install Jenkins failed, retrying in 10 seconds..."
              sleep 10
            done

            # Install Jenkins Plugin CLI
            echo "Installing Jenkins Plugin CLI..."
            JENKINS_VERSION=$(yum info jenkins | grep Version | awk '{print $3}')
            wget -O /usr/lib/jenkins/jenkins-plugin-manager.jar https://github.com/jenkinsci/plugin-installation-manager-tool/releases/download/2.12.13/jenkins-plugin-manager-2.12.13.jar

            # Install plugins with dependencies
            java -jar /usr/lib/jenkins/jenkins-plugin-manager.jar \
              --war /usr/share/java/jenkins.war \
              --plugin-file /dev/stdin <<EOF
            aws-credentials:latest
            aws-java-sdk:latest
            configuration-as-code:latest
            commons-text-api:latest
            json-api:latest
            prism-api:latest
            ec2-fleet:latest
            credentials:latest
            workflow-aggregator:latest
            git:latest
            matrix-auth:latest
            authorize-project:latest
            EOF

            # Configure system limits
            cat << 'EOF' > /etc/security/limits.d/jenkins.conf
            jenkins soft nofile 4096
            jenkins hard nofile 8192
            jenkins soft nproc 30654
            jenkins hard nproc 30654
            EOF

            # Configure Jenkins service
            cat << 'EOF' > /etc/sysconfig/jenkins
            JENKINS_HOME=/var/lib/jenkins
            JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false -Dorg.apache.commons.jelly.tags.fmt.timeZone=America/New_York"
            JENKINS_PORT="8080"
            JENKINS_USER="jenkins"
            JENKINS_JAVA_CMD="/usr/lib/jvm/java-17-amazon-corretto/bin/java"
            EOF

            # Configure systemd service
            cat << 'EOF' > /usr/lib/systemd/system/jenkins.service
            [Unit]
            Description=Jenkins Continuous Integration Server
            Requires=network.target
            After=network.target

            [Service]
            Type=simple
            Environment="JENKINS_HOME=/var/lib/jenkins"
            Environment="JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto"
            User=jenkins
            ExecStart=/usr/bin/java -Djava.awt.headless=true -jar /usr/share/java/jenkins.war --webroot=/var/cache/jenkins/war --httpPort=8080
            Restart=on-failure
            RestartSec=10
            SuccessExitStatus=143

            [Install]
            WantedBy=multi-user.target
            EOF

            systemctl daemon-reload

            # Fetch admin credentials from Secrets Manager
            for i in {1..3}; do
              if ADMIN_CREDS=$(aws secretsmanager get-secret-value \
                --secret-id ${JenkinsAdminSecret} \
                --region ${AWS::Region} \
                --query SecretString --output text); then
                ADMIN_USER=$(echo $ADMIN_CREDS | jq -r '.username')
                ADMIN_PASSWORD=$(echo $ADMIN_CREDS | jq -r '.password')
                break
              fi
              echo "Attempt $i to fetch admin credentials failed, retrying..."
              sleep 10
            done

            if [ -z "$ADMIN_USER" ] || [ -z "$ADMIN_PASSWORD" ]; then
              echo "Failed to fetch admin credentials"
              exit 1
            fi

            # Get EC2 Fleet ID
            EC2_FLEET_ID=$(aws cloudformation describe-stack-resources \
              --stack-name ${AWS::StackName} \
              --logical-resource-id EC2FleetConfiguration \
              --region ${AWS::Region} \
              --query 'StackResources[0].PhysicalResourceId' \
              --output text)

            # Create init groovy scripts directory
            mkdir -p $JENKINS_HOME/init.groovy.d

            # Configure Jenkins security
            cat << EOF > $JENKINS_HOME/init.groovy.d/create-user.groovy
            import jenkins.model.*
            import hudson.security.*
            import hudson.security.csrf.DefaultCrumbIssuer
            import jenkins.install.InstallState
            
            def instance = Jenkins.getInstance()
            
            // Create security realm
            def hudsonRealm = new HudsonPrivateSecurityRealm(false)
            instance.setSecurityRealm(hudsonRealm)
            
            // Create admin user
            def user = hudsonRealm.createAccount("${ADMIN_USER}", "${ADMIN_PASSWORD}")
            
            // Set authorization strategy
            def strategy = new GlobalMatrixAuthorizationStrategy()
            strategy.add(Jenkins.ADMINISTER, "${ADMIN_USER}")
            instance.setAuthorizationStrategy(strategy)
            
            // CSRF Protection
            instance.setCrumbIssuer(new DefaultCrumbIssuer(true))
            
            // Save the state
            instance.setInstallState(InstallState.INITIAL_SETUP_COMPLETED)
            instance.save()
            EOF

            # Configure Jenkins CasC
            cat << EOF > $JENKINS_HOME/jenkins.yaml
            jenkins:
              securityRealm:
                local:
                  allowsSignup: false
                  enableCaptcha: false
              authorizationStrategy:
                globalMatrix:
                  permissions:
                    - "Overall/Administer:${ADMIN_USER}"
              systemMessage: "Jenkins HA Setup"
              numExecutors: 0
              mode: EXCLUSIVE
              scmCheckoutRetryCount: 2
              quietPeriod: 5
              remotingSecurity:
                enabled: true
              clouds:
                - ec2Fleet:
                    name: "EC2 Fleet"
                    cloudName: "AWS"
                    region: "${AWS::Region}"
                    computerConnector:
                      jnlp:
                        workDirSettings:
                          disabled: false
                          failIfWorkDirIsMissing: false
                          internalDir: "remoting"
                    idleMinutes: 10
                    minSize: 0
                    maxSize: 10
                    fleetConfig:
                      fleetId: "${EC2_FLEET_ID}"
                      fsRoot: "/home/jenkins"
                      labels: "ec2-fleet"
                      instanceCapStr: "10"
                      minimumNumberOfSpareInstances: 1
                      scaleExecutorsByWeight: true
            security:
              globalJobDslSecurityConfiguration:
                useScriptSecurity: false
              securityManager:
                enabled: true
              csrf:
                defaultCrumbIssuer:
                  enabled: true
            tool:
              git:
                installations:
                  - name: "Default"
                    home: "git"
            EOF

            # Set correct permissions
            chown -R jenkins:jenkins $JENKINS_HOME
            chmod -R 755 $JENKINS_HOME
            find $JENKINS_HOME -type f -exec chmod 644 {} \;
            find $JENKINS_HOME -type d -exec chmod 755 {} \;

            # Create Jenkins directories
            mkdir -p /var/log/jenkins
            mkdir -p /var/cache/jenkins
            chown -R jenkins:jenkins /var/log/jenkins
            chown -R jenkins:jenkins /var/cache/jenkins
            chmod 755 /var/log/jenkins
            chmod 755 /var/cache/jenkins

            # Start Jenkins with debugging
            echo "Starting Jenkins service..."
            systemctl enable jenkins
            systemctl start jenkins
            if ! systemctl status jenkins; then
                echo "Jenkins failed to start. Checking logs..."
                journalctl -u jenkins --no-pager -n 100
                ls -la /usr/share/java/jenkins.war || true
                ls -la $JENKINS_HOME || true
                ls -la $JENKINS_HOME/plugins || true
                echo "Jenkins home contents:"
                find $JENKINS_HOME -ls || true
                exit 1
            fi

            # Wait for Jenkins to initialize
            echo "Waiting for Jenkins to initialize..."
            for i in {1..30}; do
              if curl -s -f http://localhost:8080/login > /dev/null; then
                echo "Jenkins is up and running"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "Jenkins failed to start after 5 minutes"
                journalctl -u jenkins --no-pager -n 50
                exit 1
              fi
              echo "Still waiting for Jenkins... (attempt $i/30)"
              sleep 10
            done

            # Signal completion
            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource JenkinsASG \
              --region ${AWS::Region}