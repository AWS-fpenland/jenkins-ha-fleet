AWSTemplateFormatVersion: '2010-09-09'
Description: 'Jenkins HA deployment with EC2 Fleet (Flattened Stack)'

Parameters:
  EnvironmentName:
    Type: String
    Default: jenkins-poc
    Description: Environment name used for tagging

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access

  JenkinsVersion:
    Type: String
    Default: "2.426.1"
    Description: Jenkins version to install

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  ###################
  # VPC and Network #
  ###################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select [2, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # Add these resources after the existing network configuration:

  # Elastic IPs for NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  # NAT Gateways
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-nat-1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-nat-2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-nat-3

  # Private Route Tables
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-rt-1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-rt-2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-rt-3

  # Routes for private subnets
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  # Route table associations for private subnets
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3

  ####################
  # Security Groups  #
  ####################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Jenkins ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  JenkinsControllerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Jenkins controllers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        # Allow inbound SSH for troubleshooting
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # JNLP port for Jenkins agents
        - IpProtocol: tcp
          FromPort: 50000
          ToPort: 50000
          CidrIp: 10.0.0.0/16

  JenkinsWorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Jenkins worker nodes
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow inbound SSH from controller
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref JenkinsControllerSecurityGroup
        # Allow inbound JNLP from controller
        - IpProtocol: tcp
          FromPort: 50000
          ToPort: 50000
          SourceSecurityGroupId: !Ref JenkinsControllerSecurityGroup

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS mount targets
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 10.0.0.0/16

  ################
  # IAM Roles    #
  ################
  JenkinsControllerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: JenkinsControllerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeSpotInstanceRequests
                  - ec2:RequestSpotInstances
                  - ec2:TerminateInstances
                  - ec2:CreateFleet
                  - ec2:RunInstances
                  - ec2:CreateTags
                  - iam:PassRole
                  - cloudformation:DescribeStackResources
                Resource: '*'
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref JenkinsAdminSecret

  JenkinsControllerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref JenkinsControllerRole

  JenkinsWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: JenkinsWorkerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: '*'

  JenkinsWorkerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref JenkinsWorkerRole

  ####################
  # EFS File System  #
  ####################
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-efs

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups: 
        - !Ref EFSSecurityGroup

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups: 
        - !Ref EFSSecurityGroup

  EFSMountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PrivateSubnet3
      SecurityGroups: 
        - !Ref EFSSecurityGroup

  ######################
  # Load Balancer      #
  ######################
  JenkinsALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-jenkins-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !Ref ALBSecurityGroup

  JenkinsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /login
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

  JenkinsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref JenkinsTargetGroup
      LoadBalancerArn: !Ref JenkinsALB
      Port: 80
      Protocol: HTTP

  #########################
  # Jenkins Controllers   #
  #########################
  JenkinsAdminSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}-jenkins-admin-credentials
      Description: Jenkins admin user credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  JenkinsLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-jenkins-controller
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t3a.medium
        IamInstanceProfile:
          Name: !Ref JenkinsControllerInstanceProfile
        SecurityGroupIds:
          - !Ref JenkinsControllerSecurityGroup
        KeyName: !Ref KeyName
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              DeleteOnTermination: true
        MetadataOptions:
          HttpTokens: required
          HttpEndpoint: enabled
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe

            # Update system and install dependencies
            yum update -y
            yum install -y jq amazon-efs-utils wget curl

            # Install Java 17
            yum install -y java-17-amazon-corretto-headless

            # Mount EFS with better error handling
            JENKINS_HOME="/var/lib/jenkins"
            mkdir -p $JENKINS_HOME
            
            # Try mounting EFS with retries
            for i in {1..3}; do
              if mount -t efs ${EFSFileSystem}:/ $JENKINS_HOME; then
                echo "EFS mounted successfully"
                break
              fi
              echo "Attempt $i to mount EFS failed, retrying in 10 seconds..."
              sleep 10
            done

            # Verify mount
            if ! mountpoint -q $JENKINS_HOME; then
              echo "Failed to mount EFS after 3 attempts"
              exit 1
            fi

            # Set initial permissions
            chown -R jenkins:jenkins $JENKINS_HOME
            chmod -R 755 $JENKINS_HOME
            echo "${EFSFileSystem}:/ $JENKINS_HOME efs _netdev,tls,noatime 0 0" >> /etc/fstab

            # System optimizations
            cat << 'EOF' > /etc/security/limits.d/jenkins.conf
            jenkins soft nofile 4096
            jenkins hard nofile 8192
            jenkins soft nproc 30654
            jenkins hard nproc 30654
            EOF

            # Install Jenkins
            wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
            rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
            # Install Jenkins with retries
            for i in {1..3}; do
              if yum install -y jenkins; then
                break
              fi
              echo "Attempt $i to install Jenkins failed. Retrying..."
              sleep 10
            done

            # Create plugin directory and download required plugins
            mkdir -p $JENKINS_HOME/plugins
            cd $JENKINS_HOME/plugins

            # Download required plugins with retry logic
            echo "Downloading required plugins..."
            for plugin in ec2-fleet configuration-as-code credentials workflow-aggregator git matrix-auth authorize-project; do
              for retry in {1..3}; do
                if wget -q "https://updates.jenkins.io/download/plugins/$plugin/latest/$plugin.hpi"; then
                  break
                fi
                if [ $retry -eq 3 ]; then
                  echo "Failed to download plugin $plugin after 3 attempts"
                  exit 1
                else
                  echo "Retry $retry for plugin $plugin"
                  sleep 5
                fi
              done
            done

            # Configure Java options with proper memory settings
            cat << EOF > /etc/sysconfig/jenkins
            JENKINS_JAVA_OPTIONS="-Xmx2048m -Djava.awt.headless=true -Djenkins.install.runSetupWizard=false -Dhudson.model.DirectoryBrowserSupport.CSP="
            JENKINS_PORT="8080"
            EOF

            # Create init groovy script for security setup
            # Ensure init.groovy.d has correct permissions
            mkdir -p $JENKINS_HOME/init.groovy.d
            chown -R jenkins:jenkins $JENKINS_HOME/init.groovy.d
            chmod 755 $JENKINS_HOME/init.groovy.d
            chmod 644 $JENKINS_HOME/init.groovy.d/*.groovy
            cat << 'EOF' > $JENKINS_HOME/init.groovy.d/basic-security.groovy
            import jenkins.model.*
            import hudson.security.*
            import jenkins.install.*
            import hudson.util.Secret
            import com.cloudbees.plugins.credentials.*
            import com.cloudbees.plugins.credentials.domains.*
            import org.jenkinsci.plugins.plaincredentials.impl.*

            def instance = Jenkins.getInstance()
            
            // Ensure Jenkins is in initial setup mode
            instance.setInstallState(InstallState.INITIAL_SETUP_COMPLETED)
            
            // Wait for initialization
            Thread.sleep(10000)
            EOF

            # Fetch admin credentials from Secrets Manager with retries
            for i in {1..3}; do
              if ADMIN_CREDS=$(aws secretsmanager get-secret-value \
                --secret-id ${JenkinsAdminSecret} \
                --region ${AWS::Region} \
                --query SecretString --output text); then
                ADMIN_USER=$(echo $ADMIN_CREDS | jq -r '.username')
                ADMIN_PASSWORD=$(echo $ADMIN_CREDS | jq -r '.password')
                break
              fi
              echo "Attempt $i to fetch admin credentials failed. Retrying..."
              sleep 10
            done

            if [ -z "$ADMIN_USER" ] || [ -z "$ADMIN_PASSWORD" ]; then
              echo "Failed to fetch admin credentials"
              exit 1
            fi

            # Create user creation script with proper sequencing
            cat << EOF > $JENKINS_HOME/init.groovy.d/create-user.groovy
            import jenkins.model.*
            import hudson.security.*
            import hudson.security.csrf.DefaultCrumbIssuer

            def instance = Jenkins.getInstance()
            
            // Wait for Jenkins to be available
            Thread.sleep(15000)
            
            // Create security realm
            def hudsonRealm = new HudsonPrivateSecurityRealm(false)
            instance.setSecurityRealm(hudsonRealm)
            
            // Create admin user
            def adminUsername = "$ADMIN_USER"
            def adminPassword = "$ADMIN_PASSWORD"
            
            // Delete the user if it exists already
            def user = hudsonRealm.getAllUsers().find { it.id == adminUsername }
            if (user) {
                hudsonRealm.deleteUser(adminUsername)
            }
            
            // Create the admin user
            hudsonRealm.createAccount(adminUsername, adminPassword)
            
            // Set up authorization strategy
            def strategy = new GlobalMatrixAuthorizationStrategy()
            strategy.add(Jenkins.ADMINISTER, adminUsername)
            instance.setAuthorizationStrategy(strategy)
            
            // Enable CSRF protection
            instance.setCrumbIssuer(new DefaultCrumbIssuer(true))
            
            instance.save()
            EOF

            # Configure Jenkins CasC
            # Get EC2 Fleet ID
            EC2_FLEET_ID=$(aws cloudformation describe-stack-resources \
              --stack-name ${AWS::StackName} \
              --logical-resource-id EC2FleetConfiguration \
              --region ${AWS::Region} \
              --query 'StackResources[0].PhysicalResourceId' \
              --output text)

            cat << EOF > $JENKINS_HOME/jenkins.yaml
            jenkins:
              securityRealm:
                local:
                  allowsSignup: false
                  enableCaptcha: false
              authorizationStrategy:
                globalMatrix:
                  permissions:
                    - "Overall/Administer:$ADMIN_USER"
              systemMessage: "Jenkins HA Setup"
              numExecutors: 0
              mode: EXCLUSIVE
              scmCheckoutRetryCount: 2
              quietPeriod: 5
              remotingSecurity:
                enabled: true
              clouds:
                - ec2Fleet:
                    name: "EC2 Fleet"
                    cloudName: "AWS"
                    region: "${AWS::Region}"
                    computerConnector:
                      jnlp:
                        workDirSettings:
                          disabled: false
                          failIfWorkDirIsMissing: false
                          internalDir: "remoting"
                    idleMinutes: 10
                    minSize: 0
                    maxSize: 10
                    fleetConfig:
                      fleetId: "${EC2FleetConfiguration}"
                      fsRoot: "/home/jenkins"
                      labels: "ec2-fleet"
                      instanceCapStr: "10"
                      minimumNumberOfSpareInstances: 1
                      scaleExecutorsByWeight: true
            security:
              globalJobDslSecurityConfiguration:
                useScriptSecurity: false
              securityManager:
                enabled: true
              csrf:
                defaultCrumbIssuer:
                  enabled: true
            tool:
              git:
                installations:
                  - name: "Default"
                    home: "git"
            EOF

            # Set permissions
            chown -R jenkins:jenkins $JENKINS_HOME
            chmod 700 $JENKINS_HOME
            chmod 600 $JENKINS_HOME/jenkins.yaml

            # Set correct permissions on Jenkins home
            chown -R jenkins:jenkins $JENKINS_HOME
            chmod -R 750 $JENKINS_HOME
            
            # Configure systemd service
            cat << 'EOF' > /usr/lib/systemd/system/jenkins.service
            [Unit]
            Description=Jenkins Continuous Integration Server
            Requires=network.target
            After=network.target

            [Service]
            Type=notify
            NotifyAccess=main
            ExecStart=/usr/bin/jenkins
            Restart=on-failure
            RestartSec=10
            SuccessExitStatus=143
            User=jenkins
            Environment="JENKINS_HOME=/var/lib/jenkins"
            Environment="JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto"

            [Install]
            WantedBy=multi-user.target
            EOF

            systemctl daemon-reload

            # Configure Jenkins options
            cat << 'EOF' > /etc/sysconfig/jenkins
            JENKINS_HOME=/var/lib/jenkins
            JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false -Dorg.apache.commons.jelly.tags.fmt.timeZone=America/New_York"
            JENKINS_PORT="8080"
            JENKINS_USER="jenkins"
            JENKINS_JAVA_CMD="/usr/lib/jvm/java-17-amazon-corretto/bin/java"
            EOF

            # Set Java environment variables
            cat << 'EOF' > /etc/profile.d/jenkins-java.sh
            export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto
            export PATH=$JAVA_HOME/bin:$PATH
            EOF
            chmod -R 755 $JENKINS_HOME
            find $JENKINS_HOME -type f -exec chmod 644 {} \;
            find $JENKINS_HOME -type d -exec chmod 755 {} \;

            # Create Jenkins log directory with correct permissions
            mkdir -p /var/log/jenkins
            chown jenkins:jenkins /var/log/jenkins
            chmod 755 /var/log/jenkins

            # Create and set permissions for Jenkins cache directory
            mkdir -p /var/cache/jenkins
            chown jenkins:jenkins /var/cache/jenkins
            chmod 755 /var/cache/jenkins
            
            # Start Jenkins with error checking
            echo "Starting Jenkins service..."
            if ! systemctl start jenkins; then
                echo "Jenkins failed to start, checking logs..."
                journalctl -u jenkins --no-pager -n 50
                cat /var/log/jenkins/jenkins.log || true
                exit 1
            fi

            # Wait for Jenkins to initialize
            echo "Waiting for Jenkins to initialize..."
            for i in {1..30}; do
                if curl -s -f http://localhost:8080/login > /dev/null; then
                    echo "Jenkins is up and running"
                    break
                fi
                if [ $i -eq 30 ]; then
                    echo "Jenkins failed to start after 5 minutes"
                    journalctl -u jenkins --no-pager -n 50
                    cat /var/log/jenkins/jenkins.log || true
                    exit 1
                fi
                echo "Still waiting for Jenkins... (attempt $i/30)"
                sleep 10
            done
            
            # Wait for Jenkins to initialize
            echo "Waiting for Jenkins to initialize..."
            until curl -s -f http://localhost:8080/login > /dev/null || [ $? -eq 22 ]; do
              sleep 10
              echo "Still waiting for Jenkins..."
            done
            
            # Additional wait to ensure Jenkins is fully initialized
            sleep 30

            # Wait for Jenkins to be available
            timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080)" != "200" ]]; do sleep 5; done' || false

            # Signal completion to CloudFormation
            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource JenkinsASG \
              --region ${AWS::Region}
  
  JenkinsASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-jenkins-controllers
      DesiredCapacity: 2
      MinSize: 0
      MaxSize: 3
      TargetGroupARNs:
        - !Ref JenkinsTargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      LaunchTemplate:
        LaunchTemplateId: !Ref JenkinsLaunchTemplate
        Version: !GetAtt JenkinsLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-jenkins-controller
          PropagateAtLaunch: true

  #######################
  # EC2 Fleet Workers   #
  #######################
  WorkerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        IamInstanceProfile:
          Name: !Ref JenkinsWorkerInstanceProfile
        SecurityGroupIds:
          - !Ref JenkinsWorkerSecurityGroup
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            
            # Update system
            yum update -y
            yum install -y java-11-amazon-corretto-headless git docker
            
            # Start Docker
            systemctl enable docker
            systemctl start docker
            
            # Create Jenkins user
            useradd -m -d /home/jenkins jenkins
            
            # Setup Docker permissions
            usermod -aG docker jenkins
            
            # Install required tools
            yum install -y python3-pip maven
            
            # Configure worker node
            mkdir -p /home/jenkins/workspace
            chown -R jenkins:jenkins /home/jenkins

  EC2FleetConfiguration:
    Type: AWS::EC2::EC2Fleet
    Properties:
      LaunchTemplateConfigs:
        - LaunchTemplateSpecification:
            LaunchTemplateId: !Ref WorkerLaunchTemplate
            Version: !GetAtt WorkerLaunchTemplate.LatestVersionNumber
          Overrides:
            # m6a instances
            - InstanceType: m6a.large
              SubnetId: !Ref PrivateSubnet1
              Priority: 1
            - InstanceType: m6a.xlarge
              SubnetId: !Ref PrivateSubnet1
              Priority: 2
            - InstanceType: m6a.large
              SubnetId: !Ref PrivateSubnet2
              Priority: 1
            - InstanceType: m6a.xlarge
              SubnetId: !Ref PrivateSubnet2
              Priority: 2
            - InstanceType: m6a.large
              SubnetId: !Ref PrivateSubnet3
              Priority: 1
            - InstanceType: m6a.xlarge
              SubnetId: !Ref PrivateSubnet3
              Priority: 2
            # c6a instances
            - InstanceType: c6a.large
              SubnetId: !Ref PrivateSubnet1
              Priority: 3
            - InstanceType: c6a.xlarge
              SubnetId: !Ref PrivateSubnet1
              Priority: 4
            - InstanceType: c6a.large
              SubnetId: !Ref PrivateSubnet2
              Priority: 3
            - InstanceType: c6a.xlarge
              SubnetId: !Ref PrivateSubnet2
              Priority: 4
            - InstanceType: c6a.large
              SubnetId: !Ref PrivateSubnet3
              Priority: 3
            - InstanceType: c6a.xlarge
              SubnetId: !Ref PrivateSubnet3
              Priority: 4
            # r6a instances
            - InstanceType: r6a.large
              SubnetId: !Ref PrivateSubnet1
              Priority: 5
            - InstanceType: r6a.xlarge
              SubnetId: !Ref PrivateSubnet1
              Priority: 6
            - InstanceType: r6a.large
              SubnetId: !Ref PrivateSubnet2
              Priority: 5
            - InstanceType: r6a.xlarge
              SubnetId: !Ref PrivateSubnet2
              Priority: 6
            - InstanceType: r6a.large
              SubnetId: !Ref PrivateSubnet3
              Priority: 5
            - InstanceType: r6a.xlarge
              SubnetId: !Ref PrivateSubnet3
              Priority: 6
      OnDemandOptions:
        AllocationStrategy: lowest-price
        CapacityReservationOptions:
          UsageStrategy: use-capacity-reservations-first
        MaxTotalPrice: 10.0
        MinTargetCapacity: 0
      SpotOptions:
        AllocationStrategy: capacity-optimized
        InstanceInterruptionBehavior: terminate
        MaintenanceStrategies:
          CapacityRebalance:
            ReplacementStrategy: launch-before-terminate
            TerminationDelay: 120  # Adding 120 second delay before termination
      TargetCapacitySpecification:
        DefaultTargetCapacityType: spot
        OnDemandTargetCapacity: 0
        SpotTargetCapacity: 0
        TotalTargetCapacity: 0
      Type: maintain

Outputs:
  JenkinsURL:
    Description: Jenkins URL
    Value: !Sub http://${JenkinsALB.DNSName}

  JenkinsEFS:
    Description: EFS File System ID
    Value: !Ref EFSFileSystem

  EC2FleetId:
    Description: EC2 Fleet ID
    Value: !Ref EC2FleetConfiguration